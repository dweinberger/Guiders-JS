/**
 * guider.js
 *
 * Developed at Optimizely. (www.optimizely.com)
 * We make A/B testing you'll actually use.
 *
 * Released under the Apache License 2.0.
 * www.apache.org/licenses/LICENSE-2.0.html
 *
 * Questions about Guiders or Optimizely?
 * Email us at jeff+pickhardt@optimizely.com or hello@optimizely.com.
 * 
 * Enjoy!
 */
 
 /* Functionality added:
 *  if the position for an attachedTo = -1, then the popup
 * is positioned at the bottom with no arrows, and
 * the document element of the attachedTo is highlighted
 * with a red border (adjustable via the globals immediately following).
 * Also: Pressing the space bar presses the Next button.
 *
 * Thank you, Optimizely! (Optimizely obviously is not responsible
 * for the errors and ugliness I'm introducing 
 * - David Weinberger
 *   self@evident.com
 *   July 28, 2011
 */
 
 //alert("in guidertest.js");
 
 //---------------- dw additions ----------------
 
 // globals

 
 var highlightBorderString = "#FF0000 6px dotted"; // color width style
 
 var nextButtonPressed=false;
 var prevEl=null;
 var prevBorder=null;
 var paused = false;
 var pausedGuider = null;
 var pauseButtonClicked = false;
 
 function scrollToElement(elll){
 
  var top = elll.offsetTop;
            $('html,body').animate({scrollTop: top}, 1000);
         }
 
 // Highlight the element (dw)
function highlightElement(el){
  // Draw highlight around selected element, and restore previous element's original border
  // el = #id
  
  // get the dom object
  if ((el !== "") && (el !== null) && (el !== "undefined")) {
    el = el.substring(1); // get rid of the #
    var ell = document.getElementById(el);
   }
   
   // get rid of the old border, if any
   if (prevEl !==null) {
         if (prevBorder !== null) {
            prevEl.style.border = prevBorder;		// set border of previous element to its previous border
        }
        else {
        	prevEl.style.borderWidth="0px";			// if previous element had none, set it to none 
        }
    }
    
    // If there's an element that needs highlighting...
   
    if (typeof ell !== "undefined" && ell !== null) { // not a null element
    	var currentBorder = ell.style.border; 		  // capture current el's border
    	ell.style.border= highlightBorderString; 	  // draw the new highlight border 
    	scrollToElement(ell);						  // scroll to it						  
   		prevEl = ell;								  // preserve this element, now as previous element
    	prevBorder = currentBorder;					  // and it's little dog, too.
    }
 }  
 
 
function pause(mg){
 // If in bottom-hugging mode, pause it by lowering it so just its little head pokes above the bottom.
 // Unpause by clicking anywhere on the visible guider, or typing spacebar
    if (mg.position !== -1) {return}; // exit if not in bottom hugging mode
    var myHeight = mg.elem.innerHeight();
	var lowtop=window.innerHeight - 20;
 	 mg.elem.css({
       		"position":"fixed",
        	"top": lowtop,
      	})
    paused = true; 		// global
    pausedGuider = mg; // capture guider itself
    pauseButtonClicked = true;
}

function unhideMe(){
 // restore height...if this isn't a click generated by clicking the pause button!
 // and if there is a paused guider, and if we are in fact paused.
  if ((pauseButtonClicked == true) || (pausedGuider == null) || (!paused)) {
      pauseButtonClicked = false;
      return
      }
   var myHeight = pausedGuider.elem.innerHeight();
   var toppos=window.innerHeight - (myHeight + 10);
   pausedGuider.elem.css({ "top" : toppos});
   
  pausedGuider = null; // reset the damn globalds
  paused = false;

}
//----- end of dw additions ----------------------

var guider = (function($){

// get window width
var winwid = window.innerWidth;
  var guider = {
    _defaultSettings: {
      attachTo: null,
      buttons: [{name: "Close"}],
      buttonCustomHTML: "",
      description: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
      isHashable: true,
      onShow: null,
      overlay: false,
      position: 0, // 1-12 follows an analog clock, 0 means centered
      title: "Sample title goes here",
      width: (winwid - 400),
      
    },

  _htmlSkeleton: [
      "<div class='guider'>",
      "  <div class='guider_content'>",
      "    <h1 class='guider_title'></h1>",
      "    <p class='guider_description'></p>",
      "    <div class='guider_buttons'>",
      "    </div>",
      "  </div>",
      "  <div class='guider_arrow'>",
      "  </div>",
      "</div>"
    ].join(""),
    

    
    _arrowSize: 42, // = arrow's width and height
    _guiders: {},
    _currentGuiderID: null,
    _lastCreatedGuiderID: null,
    _lastHighlightedElement:null,
//------ BUTTONS
    _addButtons: function(myGuider) {
    
      // Add buttons
      var guiderButtonsContainer = myGuider.elem.find(".guider_buttons");
      for (var i = myGuider.buttons.length-1; i >= 0; i--) {
        var thisButton = myGuider.buttons[i];
        var thisButtonElem = $("<a></a>", {
                                "class" : "guider_button",
                                "text" : thisButton.name });
        if (typeof thisButton.classString !== "undefined" && thisButton.classString !== null) {
          thisButtonElem.addClass(thisButton.classString);
        }

        guiderButtonsContainer.append(thisButtonElem);

        if (thisButton.onclick) {
          thisButtonElem.bind("click", thisButton.onclick);
        } else if (!thisButton.onclick && thisButton.name.toLowerCase() === "close") {
          thisButtonElem.bind("click", function() { guider.hideAll(); });
        } else if (!thisButton.onclick && thisButton.name.toLowerCase() === "next") {
          thisButtonElem.bind("click", function() { guider.next(); });
        } 
        // dw addition
         else if (!thisButton.onclick && thisButton.name.toLowerCase() === "pause") {
          thisButtonElem.bind("click", function() { pause(myGuider); });
        }
      }
 

      if (myGuider.buttonCustomHTML !== "") {
        var myCustomHTML = $(myGuider.buttonCustomHTML);
        myGuider.elem.find(".guider_buttons").append(myCustomHTML);
      }
    },
//------- ATTACH
       _attach: function(myGuider) {
      if (typeof myGuider.attachTo === "undefined" || myGuider === null) {
        return;
      }
      
      var myHeight = myGuider.elem.innerHeight();
      var myWidth = myGuider.elem.innerWidth();
          
    // if position = -1, then put it on the bottom [dw]
    
    if (myGuider.position === -1) {
    	var toppos=window.innerHeight - (myHeight + 10);
    	var leftpos = (window.innerWidth - myWidth) / 2;
    	var wd = (window.innerWidth - 50) + "px";
     	 myGuider.elem.css({
       		"position":"fixed",
        	"top": toppos,
        	"left": leftpos,
        	//"width":wd 
      	});
      	return // if at bottom, do not want any arrows
      }

 
      if (myGuider.position === 0) {
        myGuider.elem.css("position", "absolute");
        myGuider.elem.css("top", ($(window).height() - myHeight) / 3 + $(window).scrollTop() + "px");
        myGuider.elem.css("left", ($(window).width() - myWidth) / 2 + $(window).scrollLeft() + "px");
        return;
      }

      myGuider.attachTo = $(myGuider.attachTo);
      var base = myGuider.attachTo.offset();
      var attachToHeight = myGuider.attachTo.innerHeight();
      var attachToWidth = myGuider.attachTo.innerWidth();

      var top = base.top;
      var left = base.left;

      var bufferOffset = 0.9 * guider._arrowSize;

      var offsetMap = { // Follows the form: [height, width]
        1: [-bufferOffset - myHeight, attachToWidth - myWidth],
        2: [0, bufferOffset + attachToWidth],
        3: [attachToHeight/2 - myHeight/2, bufferOffset + attachToWidth],
        4: [attachToHeight - myHeight, bufferOffset + attachToWidth],
        5: [bufferOffset + attachToHeight, attachToWidth - myWidth],
        6: [bufferOffset + attachToHeight, attachToWidth/2 - myWidth/2],
        7: [bufferOffset + attachToHeight, 0],
        8: [attachToHeight - myHeight, -myWidth - bufferOffset],
        9: [attachToHeight/2 - myHeight/2, -myWidth - bufferOffset],
        10: [0, -myWidth - bufferOffset],
        11: [-bufferOffset - myHeight, 0],
        12: [-bufferOffset - myHeight, attachToWidth/2 - myWidth/2]
      };

      offset = offsetMap[myGuider.position];
      top += offset[0];
      left += offset[1];

      myGuider.elem.css({
        "position":"absolute",
        "top": top,
        "left": left
      });

      
    },
    
   

    _guiderById: function(id) {
      if (typeof guider._guiders[id] === "undefined") {
        throw "Cannot find guider with id " + id;
      }
      return guider._guiders[id];
    },
    
    _showOverlay: function() {
      $("#guider_overlay").fadeIn("fast");
    },
    
    _hideOverlay: function() {
      $("#guider_overlay").fadeOut("fast");
    },
    
    _initializeOverlay: function() {
      if ($("#guider_overlay").length === 0) {
        $("<div id=\"guider_overlay\"></div>").hide().appendTo("body");
      }
    },
    
    _styleArrow: function(myGuider) {
      var position = myGuider.position || 0;
      if (!position) {
        return;
      }
      var myGuiderArrow = $(myGuider.elem.find(".guider_arrow"));
      var newClass = {
        1: "guider_arrow_down",
        2: "guider_arrow_left",
        3: "guider_arrow_left",
        4: "guider_arrow_left",
        5: "guider_arrow_up",
        6: "guider_arrow_up",
        7: "guider_arrow_up",
        8: "guider_arrow_right",
        9: "guider_arrow_right",
        10: "guider_arrow_right",
        11: "guider_arrow_down",
        12: "guider_arrow_down"
      };
      myGuiderArrow.addClass(newClass[position]);

      var myHeight = myGuider.elem.innerHeight();
      var myWidth = myGuider.elem.innerWidth();
      var arrowOffset = guider._arrowSize / 2;
      var positionMap = {
        1: ["right", arrowOffset],
        2: ["top", arrowOffset],
        3: ["top", myHeight/2 - arrowOffset],
        4: ["bottom", arrowOffset],
        5: ["right", arrowOffset],
        6: ["left", myWidth/2 - arrowOffset],
        7: ["left", arrowOffset],
        8: ["bottom", arrowOffset],
        9: ["top", myHeight/2 - arrowOffset],
        10: ["top", arrowOffset],
        11: ["left", arrowOffset],
        12: ["left", myWidth/2 - arrowOffset]
      };
      var position = positionMap[myGuider.position];
      myGuiderArrow.css(position[0], position[1] + "px");
    },

    /**
     * One way to show a guider to new users is to direct new users to a URL such as
     * http://www.mysite.com/myapp#guider=welcome
     *
     * This can also be used to run guiders on multiple pages, by redirecting from
     * one page to another, with the guider id in the hash tag.
     *
     * Alternatively, if you use a session variable or flash messages after sign up,
     * you can add selectively add JavaScript to the page: "guider.show('first');"
     */
    _showIfHashed: function(myGuider) {
      var GUIDER_HASH_TAG = "guider=";
      var hashIndex = window.location.hash.indexOf(GUIDER_HASH_TAG);
      if (hashIndex !== -1) {
        var hashGuiderId = window.location.hash.substr(hashIndex + GUIDER_HASH_TAG.length);
        if (myGuider.id.toLowerCase() === hashGuiderId.toLowerCase()) {
          // Success!
          guider.show(myGuider.id);
        }
      }
    },
    
    // NEXT function
    next: function() {
      var currentGuider = guider._guiders[guider._currentGuiderID];
      if (typeof currentGuider === "undefined") {
        return;
      }
      var nextGuiderId = currentGuider.next || null;
      if (nextGuiderId !== null && nextGuiderId !== "") {
        var myGuider = guider._guiderById(nextGuiderId);
        var omitHidingOverlay = myGuider.overlay ? true : false;
        guider.hideAll(omitHidingOverlay);
        guider.show(nextGuiderId);
      
      }
    },

    createGuider: function(passedSettings) {
      if (passedSettings === null || passedSettings === undefined) {
        passedSettings = {};
      }

      // Extend those settings with passedSettings
      myGuider = $.extend({}, guider._defaultSettings, passedSettings);
      myGuider.id = myGuider.id || String(Math.floor(Math.random() * 1000));

      var guiderElement = $(guider._htmlSkeleton);
      myGuider.elem = guiderElement;
      myGuider.elem.css("width", myGuider.width + "px");
      guiderElement.find("h1.guider_title").html(myGuider.title);
      guiderElement.find("p.guider_description").html(myGuider.description);

      guider._addButtons(myGuider);

      guiderElement.hide();
      guiderElement.appendTo("body");
      guiderElement.attr("id", myGuider.id);
           
     
     // return from semi-hidden state (dw)
     guiderElement.bind("click", function(){
     	unhideMe();
     	
     	});
     
     
     
        //guiderElement.addEventListener('click',function () {
    //this.style.backgroundColor = '#cc0000'},false);
    
      
      

      // Ensure myGuider.attachTo is a jQuery element.
      if (typeof myGuider.attachTo !== "undefined" && myGuider !== null) {
        guider._attach(myGuider);
        //guider._styleArrow(myGuider);
      }

      guider._initializeOverlay();

      guider._guiders[myGuider.id] = myGuider;
      guider._lastCreatedGuiderID = myGuider.id;
      
      /**
       * If the URL of the current window is of the form
       * http://www.myurl.com/mypage.html#guider=id
       * then show this guider.
       */
      if (myGuider.isHashable) {
        guider._showIfHashed(myGuider);
      }
      
          

      return guider;
    },

    hideAll: function(omitHidingOverlay) {
      $(".guider").fadeOut("fast");
      if (typeof omitHidingOverlay !== "undefined" && omitHidingOverlay === true) {
        // do nothing for now
      } else {
        guider._hideOverlay();
      }
      return guider;
    },

 // SHOW function
    show: function(id) {
      if (!id && guider._lastCreatedGuiderID) {
        id = guider._lastCreatedGuiderID;
      }
      
      var myGuider = guider._guiderById(id);
      if (myGuider.overlay) {
        guider._showOverlay();
      }
      
       
      // You can use an onShow function to take some action before the guider is shown.
      if (myGuider.onShow) {
        myGuider.onShow(myGuider);
      }
       
      guider._attach(myGuider);
      
 // ---- HIGHLIGHT IT [dw]
      var elem = $(myGuider.attachTo);
      var elem1 = elem.selector;
      //elem1 = myGuider.elem;
      highlightElement(elem1);
      
      myGuider.elem.fadeIn("fast");

      var windowHeight = $(window).height();
      var scrollHeight = $(window).scrollTop();
      var guiderOffset = myGuider.elem.offset();
      var guiderElemHeight = myGuider.elem.height();
      
      // don't scroll to the guider if position = -1 [dw]
      var myGuiderPosition = myGuider.position;
      if ((myGuiderPosition != -1) && (guiderOffset.top - scrollHeight < 0 ||
         guiderOffset.top + guiderElemHeight + 40 > scrollHeight + windowHeight)) {
        window.scrollTo(0, Math.max(guiderOffset.top + (guiderElemHeight / 2) - (windowHeight / 2), 0));
      }

      guider._currentGuiderID = id;
      return guider;
    }
  };
  
  
  

  return guider;
}).call(this, jQuery);

 function keyHandler(e)
 {
 	var pressedKey;
 	if (document.all)	{ e = window.event; }
	if (document.layers || e.which) { pressedKey = e.which; }
 	if (document.all)	{ pressedKey = e.keyCode; }
 
 	pressedCharacter = String.fromCharCode(pressedKey);
 	//alert(e + ' Character = ' + pressedCharacter + ' [Decimal value = ' + pressedKey + ']');
 	if (pressedKey==32){
 		//alert("SPACE");
 		guider.next();
 		}
 	else { nextButtonPressed=false;}
 }
 document.onkeypress = keyHandler;
 
 
